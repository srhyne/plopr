#!/usr/bin/env php
<?php

$plopr = new Plopr();
$plopr->run();

/**
* 
*/
class Plopr
{

	/**
	 * internal error string holder
	 * holds the string for easier error response
	 * deep in scope
	 * @var $_err
	 */
	private $_err;

	/**
	 * testing this again
	 * @var string
	 */
	private static $_config_path = 'ploprfile.json';

	private static $_sync_file = '~plopr';

	/**
	 * main function
	 * @return bool true of false if running
	 */
	function run()
	{
		$config = file_get_contents(static::$_config_path);
		$this->config =& $config;

		if(!$config){
			return $this->_error(
				'Could not find ploprfile in this directory'
			);
		}

		$config = json_minify($config);
		$config = json_decode($config, true);


		if(!$config){
			return $this->_error(
				'Unable to parse your config file. Should be in strict JSON format (comments OK though).'
			);
		}

		$sync = $this->buildSyncCmd();

		if(!$sync){
			return $this->_error();
		}

		$sync = "#!/usr/bin/env bash\n\n$sync";
		$sync .= "\necho '".green('PLOPPED!', false)."'\n";

		$file = static::$_sync_file;
		file_put_contents($file, $sync);
		`chmod 755 $file`;

		green('plopping...');

		passthru("./$file");

		if( $this->_watch() ){
			green('watching...');
			passthru( $this->_buildWatchCmd($file) );	
		}

		return true;
	}

	private function _watch()
	{
		return (int)get_cli_option('watch', 1);
	}


	private function _buildWatchCmd($file)
	{
		$cmd = 	"fswatch -o \\\n";
		$cmd .= $this->_excludes();
		$cmd .= "./ | xargs -n1 ./$file\n";
		return $cmd;
	}

	
	/**
	 * build out the plopr_sync file
	 * @return string the entire contents of the script
	 */
	private function buildSyncCmd()
	{
		$cmd = 'rsync -aP';
		$cmd .= $this->_flag('verbose', 'v');
		$cmd .= $this->_flag('dry-run', 'n');
		$cmd .= $this->_flag('delete', ' --delete');

		$excludes = $this->_excludes();
		if($excludes){
			$cmd .= " \\\n$excludes";
			$cmd .= './';
		}
		else{
			$cmd .= ' ./';
		}

		return $this->eachHost($cmd);
	
	}

	/**
	 * helper for formatting script flags
	 * @param  string $key they config key to check for
	 * @param  string $flag rsync flag value to add
	 * @return string the rsync flag or empty string
	 */
	private function _flag($key = '', $flag)
	{
		$on = (bool)array_get($this->config, $key, false);
		return $on ? $flag : ''; 
	}

	/**
	 * build up excludes for rsync
	 * @return string formatted exlude options
	 */
	private function _excludes()
	{

		$excludes = array_get( $this->config, 'excludes', array() );
		
		$excludes[] = static::$_sync_file;
		$excludes[] = static::$_config_path;

		$str = '';
		foreach ($excludes as $ex) {
			$str .= "--exclude=$ex \\\n";
		}
		return $str;
	}

	/**
	 * expand the same command for each host
	 * TODO : consider using rsync batch mode
	 * @param  string $cmd command {{@see buildSyncCmd}}
	 * @return string expanded rsync command per server
	 */
	private function eachHost($cmd = '')
	{
		$hosts = array_get($this->config, 'hosts', array());
		if(empty($hosts)){
			$this->_err = 'No hosts set in ploprfile';
			return false;
		};

		$sync = '';

		$from_host = gethostname();
		$from_dir = trim(`pwd`);

		$passed_from_host = get_cli_option('from', '');
		if( $passed_from_host === ':me' ){
			$passed_from_host = $from_host;
		}

		$tag = get_cli_option('tag');

		foreach ($hosts as $host) {

			//if the host config has a from designation
			//then pass if this host doesn't match
			$from = preg_split('/\:/', array_get($host, 'from', ':') );

			$_from_host = array_get($from, '0');
			if( starts_with($_from_host, '{{') && $passed_from_host ){
				$_from_host = $passed_from_host;
			}

			$_from_dir = array_get($from, '1');

			if($_from_host && $_from_host != $from_host){
				green('skipping from host '. $_from_host);
				continue;
			}

			if($_from_dir && $_from_dir != $from_dir){
				green('skipping from dir '. $_from_host);
				continue;
			}

			if( $tag ){
				$host_tag = array_get($host, 'tag');
				if( $host_tag != $tag ){
					green('skipping unmatched tag on '. $_from_host);
					continue;
				}
			}

			$valid = $this->_validateHost($host);
			if(!$valid){
				$this->_err = 'Host has invalid format: '.json_encode($host);
				return false;
			}

			$h = array_get($host, 'host', '');
			$u = array_get($host, 'username', '');
			$p = array_get($host, 'path', '');
			
			if($h && $u && $p){
				$sync .= "$cmd $u@$h:$p\n\n";
			}
			else if($p){
				$sync .= "$cmd $p\n\n";
			}

			$__from_dir = str_replace( trim(`echo ~/`), '~/', $from_dir);
			$info = 'rsync '.abridge($__from_dir, 40);
			green("$info to $u@$h:$p");

		}

		if(!$sync){
			$this->_err = 'Nothing to sync. Perhaps no from hosts match this machine?';
		}

		return $sync;
	}

	/**
	 * tests for valid host
	 * @param  Array $host config object for rsync host destination
	 * @return Mixed false or the valid $host
	 */
	private function _validateHost( $host )
	{
		//this is just a path declaration
		if( !isset($host['host']) && isset($host['path']) ){
			return true;
		}

		return isset($host['username']) && isset($host['host']) && isset($host['path']);
	}

	/**
	 * return a formatted error
	 * @param  string $msg 'your error'
	 * @return string $msg 'formated error'
	 */
	private function _error($msg = null)
	{
		$msg = $msg 
			? $msg 
			: ($this->_err ? $this->_err : 'error');

		$this->_err = null;
		print("\x07");
		// print("\n$msg\n");
		print("\n\033[91m".$msg."\033[0m\n\n");
		return false;
	}

}

/**
 * Get an item from an array using "dot" notation.
 *
 * <code>
 *		// Get the $array['user']['name'] value from the array
 *		$name = array_get($array, 'user.name');
 *
 *		// Return a default from if the specified item doesn't exist
 *		$name = array_get($array, 'user.name', 'Taylor');
 * </code>
 *
 * @param  array   $array
 * @param  string  $key
 * @param  mixed   $default
 * @return mixed
 */
function array_get($array, $key, $default = null)
{
	if($key === null) return $array;
	// if (is_null($key)) return $array;

	// To retrieve the array item using dot syntax, we'll iterate through
	// each segment in the key and look for that value. If it exists, we
	// will return it, otherwise we will set the depth of the array and
	// look for the next segment.
	foreach (explode('.', $key) as $segment)
	{
		if ( ! is_array($array) or ! array_key_exists($segment, $array))
		{
			return $default;
		}

		$array = $array[$segment];
	}

	return $array;
}

/**
 * Determine if a given string begins with a given value.
 *
 * @param  string  $haystack
 * @param  string  $needle
 * @return bool
 */
function starts_with($haystack, $needle)
{
	return strpos($haystack, $needle) === 0;
}

function green( $txt, $print = true )
{
	$txt = "\033[92m$txt\033[0m\n";
	if( $print ){
		print($txt);
	}
	return $txt;
}

function abridge($text, $maxChars = 40)
{
	$textLength = strlen($text);
	if( $textLength <= $maxChars ){
		return $text;
	}
	return substr_replace(
		$text, '...', 
		$maxChars/2, $textLength-$maxChars
	);
}

/**
 * Get a CLI option from the argv $_SERVER variable.
 *
 * @param  string  $option
 * @param  mixed   $default
 * @return string
 */
function get_cli_option($option, $default = null){
	global $argv;
	foreach ($argv as $argument)
	{
		if (starts_with($argument, "--{$option}="))
		{
			return substr($argument, strlen($option) + 3);
		}
	}

	return $default;
}

/*! JSON.minify()
	v0.1 (c) Kyle Simpson
	MIT License
*/
function json_minify($json) {
	$tokenizer = "/\"|(\/\*)|(\*\/)|(\/\/)|\n|\r/";
	$in_string = false;
	$in_multiline_comment = false;
	$in_singleline_comment = false;
	$tmp; $tmp2; $new_str = array(); $ns = 0; $from = 0; $lc; $rc; $lastIndex = 0;
		
	while (preg_match($tokenizer,$json,$tmp,PREG_OFFSET_CAPTURE,$lastIndex)) {
		$tmp = $tmp[0];
		$lastIndex = $tmp[1] + strlen($tmp[0]);
		$lc = substr($json,0,$lastIndex - strlen($tmp[0]));
		$rc = substr($json,$lastIndex);
		if (!$in_multiline_comment && !$in_singleline_comment) {
			$tmp2 = substr($lc,$from);
			if (!$in_string) {
				$tmp2 = preg_replace("/(\n|\r|\s)*/","",$tmp2);
			}
			$new_str[] = $tmp2;
		}
		$from = $lastIndex;
			
		if ($tmp[0] == "\"" && !$in_multiline_comment && !$in_singleline_comment) {
			preg_match("/(\\\\)*$/",$lc,$tmp2);
			if (!$in_string || !$tmp2 || (strlen($tmp2[0]) % 2) == 0) {	// start of string with ", or unescaped " character found to end string
				$in_string = !$in_string;
			}
			$from--; // include " character in next catch
			$rc = substr($json,$from);
		}
		else if ($tmp[0] == "/*" && !$in_string && !$in_multiline_comment && !$in_singleline_comment) {
			$in_multiline_comment = true;
		}
		else if ($tmp[0] == "*/" && !$in_string && $in_multiline_comment && !$in_singleline_comment) {
			$in_multiline_comment = false;
		}
		else if ($tmp[0] == "//" && !$in_string && !$in_multiline_comment && !$in_singleline_comment) {
			$in_singleline_comment = true;
		}
		else if (($tmp[0] == "\n" || $tmp[0] == "\r") && !$in_string && !$in_multiline_comment && $in_singleline_comment) {
			$in_singleline_comment = false;
		}
		else if (!$in_multiline_comment && !$in_singleline_comment && !(preg_match("/\n|\r|\s/",$tmp[0]))) {
			$new_str[] = $tmp[0];
		}
	}
	$new_str[] = $rc;
	return implode("",$new_str);
}